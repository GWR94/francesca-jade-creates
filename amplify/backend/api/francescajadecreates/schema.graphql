type Product
  @model
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      { allow: public, provider: apiKey, operations: [read] }
      { allow: groups, groups: ["Admin"], operations: [create, read, update, delete] }
    ]
  ) {
  id: ID!
  title: String!
  description: String!
  tagline: String!
  images: Images
  customOptions: [String]
  setPrice: Boolean
  type: String!
  tags: [String]!
  searchField: String
  createdAt: String
  updatedAt: String
  variants: [Variants]
}

type User
  @model(
    queries: { get: "getUser" }
    mutations: { create: "registerUser", update: "updateUser" }
    subscriptions: null
  )
  @auth(
    rules: [
      { allow: owner, identityField: "id" }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  id: ID!
  username: String!
  email: String!
  name: String
  registered: Boolean
  orders: [Order] @connection(name: "UserOrders")
  profileImage: S3Object
  shippingAddress: ShippingAddress
  savedProducts: [SavedProduct]
  trackingInfo: String
}

type Order
  @auth(
    rules: [
      { allow: owner, identityField: "id" },
      { allow: private, provider: userPools, operations: [create, read] }
      { allow: groups, groups: ["Admin"], operations: [create, read, update, delete] }
    ]
  )
  @model(mutations: { create: "createOrder", update: "updateOrder" }, queries: { list: "listOrders", get: "getOrder" }) {
  id: String!
  products: [StripeProduct!]!
  stripePaymentIntent: String
  user: User @connection(name: "UserOrders") 
  shippingAddress: ShippingAddress
  createdAt: String!
  stripeOrderId: String
  paymentStatus: String
  orderProcessed: Boolean!
  userInfo: UserInfo!
  shipped: Boolean
}

type UserInfo {
  emailAddress: String!
  name: String!
}

type StripeProduct {
  id: ID!
  title: String!
  tagline: String!
  image: S3Object!
  variant: Variants
  customOptions: [String]!
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type ShippingAddress {
  city: String!
  country: String!
  address_line1: String!
  address_line2: String
  address_postcode: String!
}

type SavedProduct {
  id: String!
  title: String!
  description: String!
  image: S3Object!
  type: String!
  tagline: String!
  variants: [Variants]!
}

type Variants {
  variantName: String
  instructions: String
  dimensions: String!
  features: [Features]!
  price: Price
  images: [S3Object]
}

type Features {
  name: String!
  inputType: String!
  description: String
  featureType: String!
  value: FeatureValue!
}

type FeatureValue {
  array: [String]
  range: [Int]
  number: Int
}

type Price {
  item: Float!
  postage: Float!
}

type Range {
  min: Int!
  max: Int!
}

type Images {
  cover: Int!
  collection: [S3Object]!
}