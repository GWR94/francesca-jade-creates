type Product
  @model
  @searchable
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [update, delete, create, read] }
      { allow: public, provider: apiKey, operations: [read] }
      { allow: groups, groups: ["Admin"], operations: [create, read, update] }
    ]
  ) {
  id: String!
  title: String!
  description: String!
  image: [S3Object]!
  price: Float!
  shippingCost: Float!
  type: String!
  tags: [String]
}

type User
  @model(
    queries: { get: "getUser" }
    mutations: { create: "registerUser", update: "updateUser" }
    subscriptions: null
  )
  @auth(
    rules: [
      { allow: owner, ownerField: "id", identityClaim: "sub" }
      { allow: private, provider: userPools }
    ]
  ) {
  id: ID!
  username: String!
  email: String!
  name: String
  registered: Boolean
  orders: [Order] @connection(name: "UserOrders")
  profileImage: S3Object
  shippingAddress: ShippingAddress
}

type Order
  @model(queries: null, mutations: { create: "createOrder" }, subscriptions: null) {
  id: ID!
  product: Product @connection
  user: User @connection(name: "UserOrders")
  shippingAddress: ShippingAddress
  createdAt: String!
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type ShippingAddress {
  city: String!
  country: String!
  address_line1: String!
  address_line2: String
  address_county: String!
  address_postcode: String!
}
